generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["mongoDb"]
}

datasource db {
  provider = "mongodb"
  url      = env("MONGO_URI")
}

model Account {
  id                 String  @id @default(dbgenerated()) @map("_id") @db.ObjectId
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(dbgenerated()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String
  expires      DateTime
  User         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(dbgenerated()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  is_mod        Boolean   @default(true)
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  id         String   @id @default(dbgenerated()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model PG_Status {
  id               String  @id @default(dbgenerated()) @map("_id") @db.ObjectId
  video_id         String  @unique
  status           Status  @default(NOT_CHECKED)
  checker          String?
  previous_status  String?
  previous_checker String?
  timestamp        Int?
  Video            Video   @relation(fields: [video_id], references: [id])
}

model Queue {
  id               String    @id @default(dbgenerated()) @map("_id") @db.ObjectId
  order            String    @default("")
  is_updating      Boolean   @default(false)
  being_updated_by String?
  Request          Request[]
}

model Request {
  id           String    @id @default(dbgenerated()) @map("_id") @db.ObjectId
  requested_by String
  video_id     String    @unique
  queue_id     String    @default("621198287caffa6dcf9e2492")
  played       Boolean   @default(false)
  played_at    DateTime?
  Queue        Queue?    @relation(fields: [queue_id], references: [id])
  Video        Video     @relation(fields: [video_id], references: [id])
}

model RequestTag {
  id   String @id @default(dbgenerated()) @map("_id") @db.ObjectId
  name String
}

model Video {
  id             String     @id @default(dbgenerated()) @map("_id") @db.ObjectId
  youtube_id      String     @unique
  title          String
  channel        String
  thumbnail      String
  region_blocked Boolean?
  embed_blocked  Boolean?
  duration       Int?
  notes          String     @default("")
  banned         Boolean    @default(false)
  PG_Status      PG_Status?
  Request        Request?
}

model VideoTag {
  id   String @id @default(dbgenerated()) @map("_id") @db.ObjectId
  name String
}

enum Status {
  NOT_CHECKED
  BEING_CHECKED
  PG
  NON_PG
}
