// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package hoss

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BannedTracksServiceClient is the client API for BannedTracksService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BannedTracksServiceClient interface {
	GetAll(ctx context.Context, in *NullMessage, opts ...grpc.CallOption) (*ListBannedTracks, error)
	GetSingle(ctx context.Context, in *SingleTrackQuery, opts ...grpc.CallOption) (*BannedTrack, error)
	AddBan(ctx context.Context, in *AddBannedTrack, opts ...grpc.CallOption) (*BannedTrack, error)
	RemoveBan(ctx context.Context, in *SingleTrackQuery, opts ...grpc.CallOption) (*RemoveBannedTrack, error)
}

type bannedTracksServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBannedTracksServiceClient(cc grpc.ClientConnInterface) BannedTracksServiceClient {
	return &bannedTracksServiceClient{cc}
}

func (c *bannedTracksServiceClient) GetAll(ctx context.Context, in *NullMessage, opts ...grpc.CallOption) (*ListBannedTracks, error) {
	out := new(ListBannedTracks)
	err := c.cc.Invoke(ctx, "/hoss.BannedTracksService/GetAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bannedTracksServiceClient) GetSingle(ctx context.Context, in *SingleTrackQuery, opts ...grpc.CallOption) (*BannedTrack, error) {
	out := new(BannedTrack)
	err := c.cc.Invoke(ctx, "/hoss.BannedTracksService/GetSingle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bannedTracksServiceClient) AddBan(ctx context.Context, in *AddBannedTrack, opts ...grpc.CallOption) (*BannedTrack, error) {
	out := new(BannedTrack)
	err := c.cc.Invoke(ctx, "/hoss.BannedTracksService/AddBan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bannedTracksServiceClient) RemoveBan(ctx context.Context, in *SingleTrackQuery, opts ...grpc.CallOption) (*RemoveBannedTrack, error) {
	out := new(RemoveBannedTrack)
	err := c.cc.Invoke(ctx, "/hoss.BannedTracksService/RemoveBan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BannedTracksServiceServer is the server API for BannedTracksService service.
// All implementations must embed UnimplementedBannedTracksServiceServer
// for forward compatibility
type BannedTracksServiceServer interface {
	GetAll(context.Context, *NullMessage) (*ListBannedTracks, error)
	GetSingle(context.Context, *SingleTrackQuery) (*BannedTrack, error)
	AddBan(context.Context, *AddBannedTrack) (*BannedTrack, error)
	RemoveBan(context.Context, *SingleTrackQuery) (*RemoveBannedTrack, error)
	mustEmbedUnimplementedBannedTracksServiceServer()
}

// UnimplementedBannedTracksServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBannedTracksServiceServer struct {
}

func (UnimplementedBannedTracksServiceServer) GetAll(context.Context, *NullMessage) (*ListBannedTracks, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedBannedTracksServiceServer) GetSingle(context.Context, *SingleTrackQuery) (*BannedTrack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSingle not implemented")
}
func (UnimplementedBannedTracksServiceServer) AddBan(context.Context, *AddBannedTrack) (*BannedTrack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBan not implemented")
}
func (UnimplementedBannedTracksServiceServer) RemoveBan(context.Context, *SingleTrackQuery) (*RemoveBannedTrack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveBan not implemented")
}
func (UnimplementedBannedTracksServiceServer) mustEmbedUnimplementedBannedTracksServiceServer() {}

// UnsafeBannedTracksServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BannedTracksServiceServer will
// result in compilation errors.
type UnsafeBannedTracksServiceServer interface {
	mustEmbedUnimplementedBannedTracksServiceServer()
}

func RegisterBannedTracksServiceServer(s grpc.ServiceRegistrar, srv BannedTracksServiceServer) {
	s.RegisterService(&BannedTracksService_ServiceDesc, srv)
}

func _BannedTracksService_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NullMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BannedTracksServiceServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hoss.BannedTracksService/GetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BannedTracksServiceServer).GetAll(ctx, req.(*NullMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _BannedTracksService_GetSingle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SingleTrackQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BannedTracksServiceServer).GetSingle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hoss.BannedTracksService/GetSingle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BannedTracksServiceServer).GetSingle(ctx, req.(*SingleTrackQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _BannedTracksService_AddBan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddBannedTrack)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BannedTracksServiceServer).AddBan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hoss.BannedTracksService/AddBan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BannedTracksServiceServer).AddBan(ctx, req.(*AddBannedTrack))
	}
	return interceptor(ctx, in, info, handler)
}

func _BannedTracksService_RemoveBan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SingleTrackQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BannedTracksServiceServer).RemoveBan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hoss.BannedTracksService/RemoveBan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BannedTracksServiceServer).RemoveBan(ctx, req.(*SingleTrackQuery))
	}
	return interceptor(ctx, in, info, handler)
}

// BannedTracksService_ServiceDesc is the grpc.ServiceDesc for BannedTracksService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BannedTracksService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hoss.BannedTracksService",
	HandlerType: (*BannedTracksServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAll",
			Handler:    _BannedTracksService_GetAll_Handler,
		},
		{
			MethodName: "GetSingle",
			Handler:    _BannedTracksService_GetSingle_Handler,
		},
		{
			MethodName: "AddBan",
			Handler:    _BannedTracksService_AddBan_Handler,
		},
		{
			MethodName: "RemoveBan",
			Handler:    _BannedTracksService_RemoveBan_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hoss.proto",
}
