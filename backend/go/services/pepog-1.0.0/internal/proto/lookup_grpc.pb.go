// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// VideoDetailsServiceClient is the client API for VideoDetailsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VideoDetailsServiceClient interface {
	Lookup(ctx context.Context, in *ContentLookup, opts ...grpc.CallOption) (*VideoDetails, error)
}

type videoDetailsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVideoDetailsServiceClient(cc grpc.ClientConnInterface) VideoDetailsServiceClient {
	return &videoDetailsServiceClient{cc}
}

func (c *videoDetailsServiceClient) Lookup(ctx context.Context, in *ContentLookup, opts ...grpc.CallOption) (*VideoDetails, error) {
	out := new(VideoDetails)
	err := c.cc.Invoke(ctx, "/onethirtyone.VideoDetailsService/lookup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VideoDetailsServiceServer is the server API for VideoDetailsService service.
// All implementations must embed UnimplementedVideoDetailsServiceServer
// for forward compatibility
type VideoDetailsServiceServer interface {
	Lookup(context.Context, *ContentLookup) (*VideoDetails, error)
	mustEmbedUnimplementedVideoDetailsServiceServer()
}

// UnimplementedVideoDetailsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedVideoDetailsServiceServer struct {
}

func (UnimplementedVideoDetailsServiceServer) Lookup(context.Context, *ContentLookup) (*VideoDetails, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Lookup not implemented")
}
func (UnimplementedVideoDetailsServiceServer) mustEmbedUnimplementedVideoDetailsServiceServer() {}

// UnsafeVideoDetailsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VideoDetailsServiceServer will
// result in compilation errors.
type UnsafeVideoDetailsServiceServer interface {
	mustEmbedUnimplementedVideoDetailsServiceServer()
}

func RegisterVideoDetailsServiceServer(s grpc.ServiceRegistrar, srv VideoDetailsServiceServer) {
	s.RegisterService(&VideoDetailsService_ServiceDesc, srv)
}

func _VideoDetailsService_Lookup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContentLookup)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoDetailsServiceServer).Lookup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/onethirtyone.VideoDetailsService/lookup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoDetailsServiceServer).Lookup(ctx, req.(*ContentLookup))
	}
	return interceptor(ctx, in, info, handler)
}

// VideoDetailsService_ServiceDesc is the grpc.ServiceDesc for VideoDetailsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VideoDetailsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "onethirtyone.VideoDetailsService",
	HandlerType: (*VideoDetailsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "lookup",
			Handler:    _VideoDetailsService_Lookup_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/lookup.proto",
}
