// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("POSTGRES_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Video {
  id             Int            @id @default(autoincrement())
  video_id       String         @unique
  title          String
  channel        String
  thumbnail      String
  region_blocked Boolean?
  embed_blocked  Boolean?
  duration       Int?
  notes          String         @default("")
  tags           TagsOnVideos[]
  pg_status      PG_Status?
  banned         Boolean       @default(false)
  Request        Request[]
}

model PG_Status {
  id               Int     @id @default(autoincrement())
  video            Video   @relation(fields: [video_id], references: [id])
  video_id         Int     @unique
  status           Status  @default(NOT_CHECKED)
  checker          String?
  previous_status  String?
  previous_checker String?
  timestamp        Int?
}

enum Status {
  NOT_CHECKED
  BEING_CHECKED
  PG
  NON_PG
}

model Request {
  id           Int              @id @default(autoincrement())
  requested_by String
  video        Video            @relation(fields: [video_id], references: [id])
  video_id     Int              @unique
  queue        Queue?           @relation(fields: [queue_id], references: [id])
  queue_id     Int?             @default(2)
  tags         TagsOnRequests[]
  played       Boolean          @default(false)
  played_at    DateTime?
}

model TagsOnRequests {
  request     Request    @relation(fields: [request_id], references: [id])
  request_id  Int
  tag         RequestTag @relation(fields: [tag_id], references: [id])
  tag_id      Int
  assigned_at DateTime   @default(now())
  assigned_by String

  @@id([request_id, tag_id])
}

model TagsOnVideos {
  video       Video    @relation(fields: [video_id], references: [id])
  video_id    Int
  tag         VideoTag @relation(fields: [tag_id], references: [id])
  tag_id      Int
  assigned_at DateTime @default(now())
  assigned_by String

  @@id([video_id, tag_id])
}

model Queue {
  id               Int       @id @default(autoincrement())
  order            String    @default("") @db.Text
  is_updating      Boolean   @default(false)
  being_updated_by String?
  requests         Request[]
}

model VideoTag {
  id     Int            @id @default(autoincrement())
  name   String
  videos TagsOnVideos[]
}

model RequestTag {
  id       Int              @id @default(autoincrement())
  name     String
  requests TagsOnRequests[]
}

model Mod {
  id   Int    @id @default(autoincrement())
  name String
}
